terraform {
  required_providers {
    aws = {
      source = "hashicorp/aws"
    }
  }
  backend "s3" {
    encrypt = true
    bucket = "shearn89-tfstate"
    dynamodb_table = "terraform-lock-table"
    key    = "shearn89-blog/terraform.tfstate"
    region = "eu-west-1"
    profile = "personal"
  }
}

provider "aws" {
  region = "eu-west-1"
  profile = "personal"
}

provider "aws" {
  alias = "virginia"
  region = "us-east-1"
  profile = "personal"
}

locals {
  domain_name = "shearn89.com"
  bucket_name = "shearn89-blog"
  log_bucket = "shearn89-access-logs"
}

data "aws_iam_policy_document" "s3_bucket_policy" {
  statement {
    sid = "1"
    actions = [
      "s3:GetObject",
    ]
    resources = [
      "arn:aws:s3:::${local.bucket_name}/*"
    ]
    principals {
      type = "AWS"
      identifiers = [
        aws_cloudfront_origin_access_identity.oai.iam_arn
      ]
    }
  }
}

resource "aws_s3_bucket" "blog_bucket" {
  #checkov:skip=CKV_AWS_144 - cross-region
  #checkov:skip=CKV_AWS_145 - kms
  bucket = local.bucket_name
  policy = data.aws_iam_policy_document.s3_bucket_policy.json
  versioning {
    enabled = true
  }
  lifecycle_rule {
    enabled = true
    id = "version retention"
    abort_incomplete_multipart_upload_days = 1
    noncurrent_version_expiration {
      days = 7
    }
  }
  server_side_encryption_configuration {
    rule {
      apply_server_side_encryption_by_default {
        sse_algorithm = "AES256"
      }
    }
  }
  logging {
    target_bucket = local.log_bucket
    target_prefix = "logs/s3/${local.bucket_name}/"
  }
  lifecycle {
    prevent_destroy = true
  }
}

resource "aws_cloudfront_origin_access_identity" "oai" {
  comment = "cloudfront-oai"
  lifecycle {
    prevent_destroy = true
  }
}

resource "aws_acm_certificate" "certificate" {
  domain_name = "www.${local.domain_name}"
  validation_method = "DNS"
  subject_alternative_names = [local.domain_name]
  provider = aws.virginia

  lifecycle {
    create_before_destroy = true
    prevent_destroy = true
  }
}

resource "aws_cloudfront_function" "function" {
  name = "single-page-url-rewrite"
  runtime = "cloudfront-js-1.0"
  comment = "appends index.html if a name or extension is not provided"
  publish = true
  code = file("${path.module}/function.js")
  lifecycle {
    prevent_destroy = true
  }
}

resource "aws_cloudfront_cache_policy" "policy" {
  name = "ShortLivedPolicy"
  comment = "Caches for at most 1 day, default 1 hour."
  default_ttl = 3600
  min_ttl = 1
  max_ttl = 86400
  parameters_in_cache_key_and_forwarded_to_origin {
    enable_accept_encoding_brotli = true
    enable_accept_encoding_gzip = true
    cookies_config {
      cookie_behavior = "none"
    }
    headers_config {
      header_behavior = "none"
    }
    query_strings_config {
      query_string_behavior = "none"
    }
  }
}

resource "aws_cloudfront_distribution" "distribution" {
  #checkov:skip=CKV_AWS_68 - skip waf for cost
  origin {
    domain_name = aws_s3_bucket.blog_bucket.bucket_regional_domain_name
    origin_id = aws_s3_bucket.blog_bucket.bucket_regional_domain_name
    s3_origin_config {
      origin_access_identity = aws_cloudfront_origin_access_identity.oai.cloudfront_access_identity_path
    }
  }
  is_ipv6_enabled = true
  price_class = "PriceClass_100"
  enabled = true
  comment = "Hugo Website, static, generated by CodeBuild"
  default_root_object = "index.html"
  aliases = [local.domain_name, "www.${local.domain_name}"]
  logging_config {
    include_cookies = false
    bucket = "${local.log_bucket}.s3.amazonaws.com"
    prefix = "logs/cloudfront/${local.bucket_name}/"
  }
  default_cache_behavior {
    allowed_methods        = ["GET", "HEAD"]
    cached_methods         = ["GET", "HEAD"]
    compress = true
    target_origin_id       = aws_s3_bucket.blog_bucket.bucket_regional_domain_name
    viewer_protocol_policy = "redirect-to-https"
    cache_policy_id = aws_cloudfront_cache_policy.policy.id
    function_association {
      event_type   = "viewer-request"
      function_arn = aws_cloudfront_function.function.arn
    }
  }
  custom_error_response {
    error_caching_min_ttl = 10
    error_code = 403
    response_code = 404
    response_page_path = "/404.html"
  }
  restrictions {
    geo_restriction {
      restriction_type = "none"
    }
  }
  viewer_certificate {
    acm_certificate_arn = aws_acm_certificate.certificate.arn
    minimum_protocol_version = "TLSv1.2_2021"
    ssl_support_method = "sni-only"
  }
  lifecycle {
    prevent_destroy = true
  }
}

resource "aws_route53_zone" "hostedZone" {
  name = local.domain_name
  lifecycle {
    prevent_destroy = true
  }
}

resource "aws_route53_record" "apex" {
  zone_id = aws_route53_zone.hostedZone.zone_id
  name    = local.domain_name
  type    = "A"
  alias {
    name = aws_cloudfront_distribution.distribution.domain_name
    zone_id = aws_cloudfront_distribution.distribution.hosted_zone_id
    evaluate_target_health = false
  }
  lifecycle {
    prevent_destroy = true
  }
}

resource "aws_route53_record" "www" {
  zone_id = aws_route53_zone.hostedZone.zone_id
  name    = "www.${local.domain_name}"
  type    = "A"
  alias {
    name = aws_cloudfront_distribution.distribution.domain_name
    zone_id = aws_cloudfront_distribution.distribution.hosted_zone_id
    evaluate_target_health = false
  }
  lifecycle {
    prevent_destroy = true
  }
}
